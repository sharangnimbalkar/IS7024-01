// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("$schema")]
        public Uri Schema { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("items")]
        public PuneHedgehog Items { get; set; }

        [JsonProperty("definitions")]
        public Definitions Definitions { get; set; }
    }

    public partial class Definitions
    {
        [JsonProperty("WelcomeElement")]
        public WelcomeElement WelcomeElement { get; set; }

        [JsonProperty("BEATUnion")]
        public BeatUnion BeatUnion { get; set; }

        [JsonProperty("DSTUnion")]
        public BeatUnion DstUnion { get; set; }

        [JsonProperty("HourFrom")]
        public HourFrom HourFrom { get; set; }

        [JsonProperty("ItudeX")]
        public HourFrom ItudeX { get; set; }

        [JsonProperty("RPTAREAUnion")]
        public BeatUnion RptareaUnion { get; set; }

        [JsonProperty("VictimAge")]
        public BeatUnion VictimAge { get; set; }

        [JsonProperty("BEATEnum")]
        public Age BeatEnum { get; set; }

        [JsonProperty("Clsd")]
        public Age Clsd { get; set; }

        [JsonProperty("Neighborhood")]
        public Age Neighborhood { get; set; }

        [JsonProperty("CpdNeighborhood")]
        public Age CpdNeighborhood { get; set; }

        [JsonProperty("Dayofweek")]
        public Age Dayofweek { get; set; }

        [JsonProperty("DSTEnum")]
        public Age DstEnum { get; set; }

        [JsonProperty("Floor")]
        public Age Floor { get; set; }

        [JsonProperty("Location")]
        public Age Location { get; set; }

        [JsonProperty("Opening")]
        public Age Opening { get; set; }

        [JsonProperty("RPTAREAEnum")]
        public Age RptareaEnum { get; set; }

        [JsonProperty("Side")]
        public Age Side { get; set; }

        [JsonProperty("Ethnicity")]
        public Age Ethnicity { get; set; }

        [JsonProperty("Gender")]
        public Age Gender { get; set; }

        [JsonProperty("Race")]
        public Age Race { get; set; }

        [JsonProperty("TheftCode")]
        public Age TheftCode { get; set; }

        [JsonProperty("UcrGroup")]
        public Age UcrGroup { get; set; }

        [JsonProperty("Age")]
        public Age Age { get; set; }
    }

    public partial class Age
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("enum")]
        public string[] Enum { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }
    }

    public partial class BeatUnion
    {
        [JsonProperty("anyOf")]
        public AnyOf[] AnyOf { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }
    }

    public partial class AnyOf
    {
        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class HourFrom
    {
        [JsonProperty("anyOf")]
        public AddressXElement[] AnyOf { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }
    }

    public partial class AddressXElement
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    public partial class WelcomeElement
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }

        [JsonProperty("properties")]
        public Properties Properties { get; set; }

        [JsonProperty("required")]
        public string[] WelcomeElementRequired { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }
    }

    public partial class Properties
    {
        [JsonProperty("INSTANCEID")]
        public AddressXElement Instanceid { get; set; }

        [JsonProperty("INCIDENT_NO")]
        public PuneHedgehog IncidentNo { get; set; }

        [JsonProperty("DATE_REPORTED")]
        public AddressXElement DateReported { get; set; }

        [JsonProperty("DATE_FROM")]
        public AddressXElement DateFrom { get; set; }

        [JsonProperty("DATE_TO")]
        public AddressXElement DateTo { get; set; }

        [JsonProperty("CLSD")]
        public PuneHedgehog Clsd { get; set; }

        [JsonProperty("UCR")]
        public PuneHedgehog Ucr { get; set; }

        [JsonProperty("DST")]
        public PuneHedgehog Dst { get; set; }

        [JsonProperty("BEAT")]
        public PuneHedgehog Beat { get; set; }

        [JsonProperty("OFFENSE")]
        public AddressXElement Offense { get; set; }

        [JsonProperty("LOCATION")]
        public PuneHedgehog Location { get; set; }

        [JsonProperty("THEFT_CODE")]
        public PuneHedgehog TheftCode { get; set; }

        [JsonProperty("FLOOR")]
        public PuneHedgehog Floor { get; set; }

        [JsonProperty("SIDE")]
        public PuneHedgehog Side { get; set; }

        [JsonProperty("OPENING")]
        public PuneHedgehog Opening { get; set; }

        [JsonProperty("HATE_BIAS")]
        public AddressXElement HateBias { get; set; }

        [JsonProperty("DAYOFWEEK")]
        public PuneHedgehog Dayofweek { get; set; }

        [JsonProperty("RPT_AREA")]
        public PuneHedgehog RptArea { get; set; }

        [JsonProperty("CPD_NEIGHBORHOOD")]
        public PuneHedgehog CpdNeighborhood { get; set; }

        [JsonProperty("SNA_NEIGHBORHOOD")]
        public PuneHedgehog SnaNeighborhood { get; set; }

        [JsonProperty("WEAPONS")]
        public AddressXElement Weapons { get; set; }

        [JsonProperty("DATE_OF_CLEARANCE")]
        public AddressXElement DateOfClearance { get; set; }

        [JsonProperty("HOUR_FROM")]
        public PuneHedgehog HourFrom { get; set; }

        [JsonProperty("HOUR_TO")]
        public PuneHedgehog HourTo { get; set; }

        [JsonProperty("ADDRESS_X")]
        public AddressXElement AddressX { get; set; }

        [JsonProperty("LONGITUDE_X")]
        public PuneHedgehog LongitudeX { get; set; }

        [JsonProperty("LATITUDE_X")]
        public PuneHedgehog LatitudeX { get; set; }

        [JsonProperty("VICTIM_AGE")]
        public PuneHedgehog VictimAge { get; set; }

        [JsonProperty("VICTIM_RACE")]
        public PuneHedgehog VictimRace { get; set; }

        [JsonProperty("VICTIM_ETHNICITY")]
        public PuneHedgehog VictimEthnicity { get; set; }

        [JsonProperty("VICTIM_GENDER")]
        public PuneHedgehog VictimGender { get; set; }

        [JsonProperty("SUSPECT_AGE")]
        public PuneHedgehog SuspectAge { get; set; }

        [JsonProperty("SUSPECT_RACE")]
        public PuneHedgehog SuspectRace { get; set; }

        [JsonProperty("SUSPECT_ETHNICITY")]
        public PuneHedgehog SuspectEthnicity { get; set; }

        [JsonProperty("SUSPECT_GENDER")]
        public PuneHedgehog SuspectGender { get; set; }

        [JsonProperty("TOTALNUMBERVICTIMS")]
        public PuneHedgehog Totalnumbervictims { get; set; }

        [JsonProperty("TOTALSUSPECTS")]
        public PuneHedgehog Totalsuspects { get; set; }

        [JsonProperty("UCR_GROUP")]
        public PuneHedgehog UcrGroup { get; set; }

        [JsonProperty("COMMUNITY_COUNCIL_NEIGHBORHOOD")]
        public PuneHedgehog CommunityCouncilNeighborhood { get; set; }

        [JsonProperty("ZIP")]
        public PuneHedgehog Zip { get; set; }
    }

    public partial class PuneHedgehog
    {
        [JsonProperty("$ref")]
        public string Ref { get; set; }
    }

    public enum TypeEnum { Integer, Number, String };

    public partial class Welcome1
    {
        public static Welcome1 FromJson(string json) => JsonConvert.DeserializeObject<Welcome1>(json, QuickType.Converter.Settings);
    }

    public static class Serialize1
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter1
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "integer":
                    return TypeEnum.Integer;
                case "number":
                    return TypeEnum.Number;
                case "string":
                    return TypeEnum.String;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Integer:
                    serializer.Serialize(writer, "integer");
                    return;
                case TypeEnum.Number:
                    serializer.Serialize(writer, "number");
                    return;
                case TypeEnum.String:
                    serializer.Serialize(writer, "string");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
